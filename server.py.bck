#!/usr/bin/env python
"""
Very simple HTTP server in python.

Usage::
    ./dummy-web-server.py [<port>]

Send a GET request::
    curl http://localhost

Send a HEAD request::
    curl -I http://localhost

Send a POST request::
    curl -d "foo=bar&bin=baz" http://localhost

"""
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
import SocketServer
import os
import sys
import time
import parserheader
import json
import re
from lfd import lfd
from make_colors import make_colors
from debug import debug
import traceback
import configset
import pm
import tarfile
import zipfile
PID = os.getpid()
PACKAGES = ''

class S(BaseHTTPRequestHandler):
    def _set_headers(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html; charset=UTF-8')
        self.end_headers()

    def do_GET(self):
        global PACKAGES
        # print PACKAGES
        lfd_class = lfd()
        if os.getenv('DEBUG'):
            print "dir(self) =", dir(self)
            print "-"*100
            for i in dir(self):
                print i, "=", getattr(self, i)
        user_agent_string = parserheader.parserHeader(self.headers).get('User-Agent')
        user_agent, user_agent_split = parserheader.UserAgent(user_agent_string)
        print make_colors("USER_AGENT_STRING =", 'white', 'blue'), make_colors(user_agent_string, 'blue')
        print make_colors("USER-AGENT =", 'white', 'cyan'), make_colors(user_agent, 'cyan')
        print make_colors("USER-AGENT SPLIT =", 'white', 'red'), make_colors(user_agent_split, 'white')
        info_header = json.loads(user_agent_split[1])
        print make_colors("INFO_HEADER =", 'white', 'magenta'), make_colors(info_header, 'yellow')
        print make_colors("PATH =", "white", 'green'), make_colors(self.path)
        path_split = re.split('/', self.path)
        for i in path_split:
            path_split.remove('')
        print 'PATH_SPLIT =', path_split
        find_name = path_split[-1].lower()
        find_python_version = "cp" + "".join(info_header.get('python').split('.', 2)[:2])
        find_architecture = info_header.get('cpu').lower()
        if find_architecture == 'amd64':
            find_architecture = 'win_amd64'
        found_link, found_name, found_package_name = lfd_class.find(find_name, find_python_version, find_architecture, PACKAGES)
        # headers = self.headers
        # print "headers =", headers
        # content_length = int(self.headers['Content-Length']) # <--- Gets the size of data
        # print "content_length =", content_length
        self._set_headers()
        self.wfile.write("""<html><head><title>Links for %s</title></head><body>
<h1>Links for argparse</h1>
<a href="%s">%s</a><br>
</body></html>"""%(found_package_name, found_link, found_name))
        # self.wfile.write("<html><body><h1>hi!</h1></body></html>")

    def do_HEAD(self):
        self._set_headers()
        
    def do_POST(self):
        content_length = int(self.headers['Content-Length']) # <--- Gets the size of data
        print "content_length =", content_length
        post_data = self.rfile.read(content_length) # <--- Gets the data itself
        print "post_data =", post_data
        self._set_headers()
        self.wfile.write("<html><body><h1>POST!</h1></body></html>")
        
def run(server_class=HTTPServer, handler_class=S, port=80):
    global PACKAGES
    lfd_class = lfd()
    from multiprocessing.pool import ThreadPool
    pool = ThreadPool(processes = 2)
    t = pool.apply_async(lfd_class.parser_content, ())
    try:
        server_address = ('', port)
        server_address_print = server_address
        if server_address[0] == '':
            server_address_print = ('0.0.0.0', server_address[1])
        httpd = server_class(server_address, handler_class)
        print 'Starting httpd .'
        while 1:
            if not t.get():
                sys.stdout.write(".")
                time.sleep(1)
            else:
                PACKAGES = t.get()
                break
        print "Server Bind %s:%s" %server_address_print
        httpd.serve_forever()
    except KeyboardInterrupt:
        sys.exit('Server shutdown ...')
    except:
        traceback.format_exc()

def get_readme(file, testzipfile=False):
    if str(file).endswith(".gz"):
        try:
            tar_file = tarfile.open(file)
            for i in tar_file.getnames():
                if i.endswith('README.rst') or i.endswith('README.md') or i.endswith('README'):
                    f = tar_file.extractfile(i)
                    return f.read()
            return ''
        except:
            print traceback.format_exc()
            return False

    elif str(file).endswith(".zip"):
        try:
            zip_file = zipfile.ZipFile(file)

            if testzipfile:
                testzip = zip_file.testzip()
                if testzip == None:
                    pass                    
                else:
                    return "zipfile corrupt !"
            for i in zip_file.namelist():
                if i.endswith('README.rst') or i.endswith('README.md') or i.endswith('README'):
                    return zip_file.read(i)
            return ''
        except:
            print traceback.format_exc()
            return False

    elif str(file).endswith(".whl"):
        try:
            zip_file = zipfile.ZipFile(file)

            if testzipfile:
                testzip = zip_file.testzip()
                if testzip == None:
                    pass                    
                else:
                    return "zipfile corrupt !"
            for i in zip_file.namelist():
                if i.endswith('METADATA'):
                    return zip_file.read(i)
            return ''
        except:
            print traceback.format_exc()
            return False
    else:
        return ''

def update_database(path=None):
    config = configset.configset()
    config.configname = 'lfd.ini'
    path_name = path
    if os.getenv('PACKAGES_DIR'):
        path = os.getenv('PACKAGES_DIR')
    if config.read_config('PACKAGES', 'dir', value='.'):
        path = config.read_config('PACKAGES', 'dir', value='.')
    if path_name:
        path = path_name
    if path == ".":
        path = os.getcwd()
    packages = identify_localstorage(path)
    for i in packages:
        description = get_readme(packages.get(i)[0])
        database((i, description, packages.get(i)))

def get_name_localstorage(package):
    p = pm.pm()
    package = os.path.basename(package)
    return p.translate(package)

def identify_localstorage(path=None):
    config = configset.configset()
    config.configname = 'lfd.ini'

    path_name = path
    if os.getenv('PACKAGES_DIR'):
        path = os.getenv('PACKAGES_DIR')
    if config.read_config('PACKAGES', 'dir', value='.'):
        path = config.read_config('PACKAGES', 'dir', value='.')
    if path_name:
        path = path_name
    if path == ".":
        path = os.getcwd()

    dir_dict = {}
    MODE = config.read_config('SCANNER', 'mode', value='walk')
    def walk():
        for ROOT, DIRS, FILES in os.walk(path):
            if FILES:
                for i in FILES:
                    name = get_name_localstorage(i)
                    if not dir_dict.get(name):
                        dir_dict.update({name:[]})
                    dir_dict.get(name).append(os.path.join(ROOT, i))
    def win():
        if " " in path:
            path = '"%s"'%(path)
        pattern = "dir /s /b %s" %(path)
        listdir = os.popen(pattern).readlines()
        for i in listdir:
            i_name = os.path.basename(i)
            name = get_name_localstorage(i_name)
            if not dir_dict.get(name):
                dir_dict.update({name:[]})
            dir_dict.get(name).append(i)

    if MODE == 'walk':
        walk()
    elif MODE == 'win':
        win()
    else:
        walk()
    return dir_dict

def database(datas=None):
    config = configset.configset()
    config.configname = 'lfd.ini'
    dbname = config.read_config('DATABASE', 'name', value='ldf.db3')
    host = config.read_config('DATABASE', 'host', value='127.0.0.1')
    port = config.read_config('DATABASE', 'port', value='3306')
    dbtype = config.read_config('DATABASE', 'type', value='sqlite')
    username = config.read_config('DATABASE', 'username', value='root')
    password = config.read_config('DATABASE', 'password', value='')
    print "dbtype =", dbtype
    debug(dbname=dbname)
    debug(host=host)
    debug(port=port)
    debug(dbtype=dbtype)

    if dbtype == 'sqlite':
        try:
            # from sqlite3 import dbapi2 as sqlite
            import sqlite3 as sqlite
        except ImportError:
            sys.exit("You not have module \"pysqlite2\", please download before ! \n")
        except:
            traceback.format_exc()
            sys.exit("ERROR by SYSTEM")

        SQL_CREATE = '''CREATE TABLE IF NOT EXISTS packages ( \
                       'id' BIGINT(100) AUTOINCREMENT NOT NULL PRIMARY KEY, \
                       'name' VARCHAR(255) NOT NULL, \
                       'description' VARCHAR(255) NOT NULL, \
                       'relpath' VARCHAR(255) NOT NULL)'''
        conn = sqlite.connect(dbname)
        cursor = conn.cursor()
        cursor.execute(SQL_CREATE)
        conn.commit()
        if datas:
            SQL_INSERT = "INSERT INTO packages ([name], [description], [relpath]) VALUES(%s, %s, %s);"%(datas[0], datas[1], datas[2])
            try:
                cursor.execute(SQL_INSERT)
                conn.commit()
            except:
                SQL_INSERT = "INSERT INTO packages ([name], [description], [relpath]) VALUES(%s, %s, %s);"%(datas[0], ' ', datas[2])
                cursor.execute(SQL_INSERT)
                conn.commit()

    elif dbtype == 'mysql':
        SQL_CREATE = '''CREATE TABLE IF NOT EXISTS packages ( \
                       `id` BIGINT(100) AUTO_INCREMENT NOT NULL PRIMARY KEY, \
                       `name` VARCHAR(255) NOT NULL, \
                       `description` VARCHAR(255) NOT NULL, \
                       `relpath` VARCHAR(255) NOT NULL)'''

        try:
            import MySQLdb
            conn = MySQLdb.connect(host, username, password, dbname, port)
            cursor = conn.cursor()
        except ImportError:
            sys.exit("You not have module \"MySQLdb\", please download before ! \n")
        except:
            try:
                conn = MySQLdb.connect(host, username, password, port=port)
                cursor = conn.cursor()
                cursor.execute(SQL_CREATE)    
                conn.commit()
            except:
                traceback.format_exc()
                sys.exit("ERROR by SYSTEM")
            if datas:
                try:
                    SQL_INSERT = "INSERT INTO packages (`name`, `description`, `relpath`) VALUES(%s, %s, %s);"%(datas[0], datas[1], datas[2])
                    cursor.execute(SQL_INSERT)
                    conn.commit()
                except:
                    SQL_INSERT = "INSERT INTO packages (`name`, `description`, `relpath`) VALUES(%s, %s, %s);"%(datas[0], ' ', datas[2])
                    cursor.execute(SQL_INSERT)
                    conn.commit()

    elif dbtype == 'oracle':
        SQL_CREATE = '''CREATE TABLE IF NOT EXISTS packages ( \
                       'id' BIGINT(100) GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1) NOT NULL PRIMARY KEY, \
                       'name' VARCHAR(255) NOT NULL, \
                       'description' VARCHAR(255) NOT NULL, \
                       'relpath' VARCHAR(255) NOT NULL)'''
        sys.exit("STILL DEVELOPMENT, PLEASE USE ANOTHER DATABASE TYPE")

    elif dbtype == 'postgres':
        SQL_CREATE = '''CREATE TABLE IF NOT EXISTS packages ( \
                       'id' BIGSERIAL NOT NULL PRIMARY KEY, \
                       'name' VARCHAR(255) NOT NULL, \
                       'description' VARCHAR(255) NOT NULL, \
                       'relpath' VARCHAR(255) NOT NULL)'''

        try:
            import psycopg2
            conn = psycopg2.connect("dbname=%s, user=%s, password=%s, host=%s, port=%s"%(dbname, username, password, host, port))
            cursor = conn.cursor()
            cursor.execute(SQL_CREATE)    
            conn.commit()
        except ImportError:
            sys.exit("You not have module \"Psycopg2\", please download before ! \n")
        except:
            traceback.format_exc()
            sys.exit("ERROR by SYSTEM")

if __name__ == "__main__":
    print "PID:", PID
    from sys import argv

    if len(argv) == 2:
        run(port=int(argv[1]))
    else:
        run()
